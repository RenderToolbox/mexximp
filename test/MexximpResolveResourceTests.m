classdef MexximpResolveResourceTests < matlab.unittest.TestCase
    
    properties
        sourceFolder = fileparts(which('topLevelResource.txt'));
        outputFolder = fullfile(tempdir(), 'MexximpResolveResourceTests');
    end
    
    methods (TestMethodSetup)
        function cleanOutputFolder(testCase)
            if 7 == exist(testCase.outputFolder, 'dir')
                rmdir(testCase.outputFolder, 's');
            end
        end
    end
    
    methods (Test)
        function testFindFuzzyMatch(testCase)
            realName = 'topLevelResource.txt';
            testNames = { ...
                'topLevelResourcePlusExtra.txt', ...
                'TOPLEVELRES.TXT', ...
                'TOPLEVEL.TX', ...
                'C:\another\machine\topLevelResource.txt', ...
                '/home/nobody/resources/topLevelResource.txt', ...
                };
            
            for nn = 1:numel(testNames)
                testName = testNames{nn};
                [matchName, isFound] = mexximpResolveResource(testName, ...
                    'sourceFolder', testCase.sourceFolder, ...
                    'useMatlabPath', false, ...
                    'strictMatching', false);
                testCase.assertTrue(isFound);
                testCase.assertEqual(matchName, realName);
            end
        end
        
        function testFindFuzzyNoMatch(testCase)
            testNames = { ...
                'topLevelResourcePlusExtra.jpb', ...
                'TOPLEVELRES.TEXT', ...
                'TOPLEVELThing.TX', ...
                'C:\another\machine\nonono.txt', ...
                '/home/nobody/resources/noway.txt', ...
                };
            
            for nn = 1:numel(testNames)
                testName = testNames{nn};
                [matchName, isFound] = mexximpResolveResource(testName, ...
                    'sourceFolder', testCase.sourceFolder, ...
                    'useMatlabPath', false, ...
                    'strictMatching', false);
                testCase.assertFalse(isFound);
                testCase.assertEqual(matchName, testName);
            end
        end
        
        function testFindStrictMatch(testCase)
            realName = 'topLevelResource.txt';
            testNames = { ...
                'topLevelResource.txt', ...
                'TOPLEVELRESOURCE.TXT', ...
                '/home/nobody/resources/topLevelResource.txt', ...
                };
            
            for nn = 1:numel(testNames)
                testName = testNames{nn};
                [matchName, isFound] = mexximpResolveResource(testName, ...
                    'sourceFolder', testCase.sourceFolder, ...
                    'useMatlabPath', false, ...
                    'strictMatching', true);
                testCase.assertTrue(isFound);
                testCase.assertEqual(matchName, realName);
            end
        end
        
        function testFindStrictNoMatch(testCase)
            testNames = { ...
                'topLevelResourcePlusExtra.txt', ...
                'TOPLEVELRES.TXT', ...
                'TOPLEVEL.TX', ...
                'C:\another\machine\TOPLEVEL.txt', ...
                '/home/nobody/resources/topLevel.txt', ...
                };
            
            for nn = 1:numel(testNames)
                testName = testNames{nn};
                [matchName, isFound] = mexximpResolveResource(testName, ...
                    'sourceFolder', testCase.sourceFolder, ...
                    'useMatlabPath', false, ...
                    'strictMatching', true);
                testCase.assertFalse(isFound);
                testCase.assertEqual(matchName, testName);
            end
        end
        
        function testFindNestedMatch(testCase)
            testName = 'nestedResource.txt';
            expectedName = fullfile('nested', testName);
            [matchName, isFound] = mexximpResolveResource(testName, ...
                'sourceFolder', testCase.sourceFolder, ...
                'useMatlabPath', false, ...
                'strictMatching', false);
            testCase.assertTrue(isFound);
            testCase.assertEqual(matchName, expectedName);
        end
        
        function testFindAndReplaceCharacters(testCase)
            testName = 'topLevelResource.txt';
            
            % replace the "e" with "3"
            expectedName = 'topL3v3lR3sourc3.txt';
            [matchName, isFound] = mexximpResolveResource(testName, ...
                'sourceFolder', testCase.sourceFolder, ...
                'useMatlabPath', false, ...
                'strictMatching', false, ...
                'outputReplaceCharacters', 'eE', ...
                'outputReplaceWith', '3');
            
            % clean up
            resourceCopy = which(matchName);
            if 2 == exist(resourceCopy, 'file')
                delete(resourceCopy);
            end
            
            testCase.assertTrue(isFound);
            testCase.assertEqual(matchName, expectedName);
        end
        
        function testFindAndReplaceCharactersToOutputFolder(testCase)
            testName = 'topLevelResource.txt';
            
            % replace the "e" with "3"
            expectedName = 'topL3v3lR3sourc3.txt';
            expectedFullPath = fullfile(testCase.outputFolder, expectedName);
            [matchName, isFound] = mexximpResolveResource(testName, ...
                'sourceFolder', testCase.sourceFolder, ...
                'useMatlabPath', false, ...
                'strictMatching', false, ...
                'outputReplaceCharacters', 'eE', ...
                'outputReplaceWith', '3', ...
                'outputFolder', testCase.outputFolder);
            
            testCase.assertTrue(isFound);
            testCase.assertEqual(matchName, expectedName);
            testCase.assertEqual(2, exist(expectedFullPath, 'file'));
        end
        
        function testFindNestedToOutputFolder(testCase)
            realName = 'nestedResource.txt';
            expectedFullPath = fullfile(testCase.outputFolder, realName);
            [matchName, isFound] = mexximpResolveResource(realName, ...
                'sourceFolder', testCase.sourceFolder, ...
                'useMatlabPath', false, ...
                'strictMatching', false, ...
                'outputFolder', testCase.outputFolder);
            testCase.assertTrue(isFound);
            testCase.assertEqual(matchName, realName);
            testCase.assertEqual(2, exist(expectedFullPath, 'file'));
        end
        
        function testFindToOutputFolderWithPrefix(testCase)
            realName = 'topLevelResource.txt';
            outputPrefix = 'subfodler';
            expectedName = fullfile(outputPrefix, realName);
            expectedFullPath = fullfile(testCase.outputFolder, expectedName);
            [matchName, isFound] = mexximpResolveResource(realName, ...
                'sourceFolder', testCase.sourceFolder, ...
                'useMatlabPath', false, ...
                'strictMatching', false, ...
                'outputFolder', testCase.outputFolder, ...
                'outputPrefix', outputPrefix);
            testCase.assertTrue(isFound);
            testCase.assertEqual(matchName, expectedName);
            testCase.assertEqual(2, exist(expectedFullPath, 'file'));
        end
        
        function testFindOnPathToOutputFolder(testCase)
            % look in the "nested" folder
            % but find the top-level file because it's on the path
            realName = 'topLevelResource.txt';
            nestedSourceFolder = fullfile(testCase.sourceFolder, 'neested');
            
            expectedFullPath = fullfile(testCase.outputFolder, realName);
            [matchName, isFound] = mexximpResolveResource(realName, ...
                'sourceFolder', nestedSourceFolder, ...
                'useMatlabPath', true, ...
                'strictMatching', false, ...
                'outputFolder', testCase.outputFolder);
            testCase.assertTrue(isFound);
            testCase.assertEqual(matchName, realName);
            testCase.assertEqual(2, exist(expectedFullPath, 'file'));
        end
        
    end
end